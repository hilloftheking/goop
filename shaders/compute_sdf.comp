#version 430 core

#include "../src/blob_defines.h"

layout(local_size_x = BLOB_SDF_LOCAL_GROUPS, local_size_y = BLOB_SDF_LOCAL_GROUPS, local_size_z = BLOB_SDF_LOCAL_GROUPS) in;

layout(r32f, binding = 0) writeonly uniform image3D img_output;
layout(rgba32f, binding = 1) readonly uniform image1D blobs_tex;

layout(location = 2) uniform int blob_count;
layout(location = 3) uniform ivec3 start_pos;

float smin(float a, float b, float k) {
  float h = clamp(0.5 + 0.5 * (b - a) / k, 0., 1.);
  return mix(b, a, h) - k * h * (1.0 - h);
}

float dist_sphere(vec3 c, float r, vec3 p) { return length(p - c) - r; }

void main() {
  vec3 p =
      (vec3(start_pos) + vec3(gl_GlobalInvocationID)) * (vec3(BLOB_SDF_SIZE) / BLOB_SDF_RES) +
      vec3(BLOB_SDF_START);

  float value = dist_sphere(imageLoad(blobs_tex, 0).xyz, BLOB_RADIUS, p);
  for (int i = 1; i < blob_count; i++) {
    value =
        smin(value, dist_sphere(imageLoad(blobs_tex, i).xyz, BLOB_RADIUS, p),
             BLOB_SMOOTH);
  }

  value = min(BLOB_SDF_MAX_DIST, value);

  imageStore(img_output, start_pos + ivec3(gl_GlobalInvocationID.xyz),
             vec4(value, 0, 0, 0));
}